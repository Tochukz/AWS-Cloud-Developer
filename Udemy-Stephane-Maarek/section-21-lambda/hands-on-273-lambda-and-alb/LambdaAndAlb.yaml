AWSTemplateFormatVersion: 2010-09-09

Description: Integrate Application Load Balancer with Lambda Function

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of existing VPC
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of existing subnet Ids
  TargetGroupName:
    Type: String
    Description: A constant
    Default: LambdaTargets
    AllowedValues:
      - LambdaTargets

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SimpleFunc
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          import json

          def handler(event, context):
            print(event)

            return {
              'statusCode': 200,
              'statusDescription': '200 OK',
              'headers': {
                'Content-Type': 'application/json'
              },
              'body': json.dumps({
                'message': 'Welcome to Lambda ALB Integration'
              }),
              'isBase64Encoded': False,
            }

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AlbSecurityGroup
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Allow HTTP from anywhere
          IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: SimpleAlb
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt AlbSecurityGroup.GroupId
      Subnets: !Ref SubnetIds

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunc
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${TargetGroupName}/*

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      HealthCheckEnabled: true
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaFunc.Arn

  AlbListenter:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  AlbDnsName:
    Description: DNS Name of the ALB
    Value: !GetAtt AppLoadBalancer.DNSName
